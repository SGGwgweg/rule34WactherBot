const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')
const cheerio = require('cheerio')
const fs = require('fs').promises
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN =
	process.env.BOT_TOKEN || '8118312308:AAFB79HimMN01tCPTLQ2nnOHpJfZzg1lv5s'
const CHAT_ID = process.env.CHAT_ID || '1812059915'
const CHECK_INTERVAL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const DATA_FILE = 'video_data.json'
const PORT = process.env.PORT || 3000

const AUTHORS = {
	blobcg: 'https://rule34.xyz/blobcg',
	croove: 'https://rule34.xyz/croove',
	giddora: 'https://rule34.xyz/giddora',
	anna_anon: 'https://rule34.xyz/anna_anon',
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true })

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway (—á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞—Å—ã–ø–∞–ª)
const express = require('express')
const app = express()

app.get('/', (req, res) => {
	res.json({
		status: 'Bot is running',
		uptime: process.uptime(),
		authors: Object.keys(AUTHORS).length,
	})
})

app.get('/health', (req, res) => {
	res.json({ status: 'OK', timestamp: new Date().toISOString() })
})

app.listen(PORT, () => {
	console.log(`HTTP server running on port ${PORT}`)
})

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
let videoData = {}
let isInitialized = false

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadVideoData() {
	try {
		const data = await fs.readFile(DATA_FILE, 'utf8')
		const loadedData = JSON.parse(data)
		videoData = loadedData.videoData || {}
		isInitialized = loadedData.isInitialized || false
		console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞')
		console.log(
			`–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${isInitialized ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' : '—Ç—Ä–µ–±—É–µ—Ç—Å—è'}`
		)
	} catch (error) {
		console.log('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π')
		videoData = {}
		isInitialized = false
		for (const author in AUTHORS) {
			videoData[author] = []
		}
		await saveVideoData()
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function saveVideoData() {
	try {
		const dataToSave = {
			videoData: videoData,
			isInitialized: isInitialized,
			lastUpdate: new Date().toISOString(),
		}
		await fs.writeFile(DATA_FILE, JSON.stringify(dataToSave, null, 2))
		console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error)
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∞ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å Python —Ñ—É–Ω–∫—Ü–∏–µ–π)
async function getLatestPostUrl(modelUrl) {
	try {
		console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${modelUrl}`)

		const response = await axios.get(modelUrl, {
			headers: {
				'User-Agent':
					'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
			},
			timeout: 10000,
		})

		const $ = cheerio.load(response.data)

		// –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∏–¥–µ–æ
		const container = $('div.box-grid')
		if (!container.length) {
			console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä box-grid –Ω–µ –Ω–∞–π–¥–µ–Ω')
			return null
		}

		// –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
		const firstLink = container.find('a.box').first()
		if (!firstLink.length || !firstLink.attr('href')) {
			console.log('–ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
			return null
		}

		const href = firstLink.attr('href')
		const fullUrl = new URL(href, modelUrl).href
		const postId =
			href.split('/').pop() || Math.random().toString(36).substr(2, 9)

		return {
			url: fullUrl,
			title: fullUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è
			id: postId,
		}
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å ${modelUrl}:`, error.message)
		return null
	}
}

let initMessageId = null

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
async function checkNewVideos(author, url) {
	const latestPost = await getLatestPostUrl(url)

	if (!latestPost) {
		console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è ${author}`)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	const previousPosts = videoData[author] || []
	const isNewPost = !previousPosts.some(post => post.id === latestPost.id)

	if (isNewPost) {
		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
		videoData[author] = [latestPost, ...previousPosts.slice(0, 19)] // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ—Å—Ç–æ–≤
		await saveVideoData()

		if (isInitialized) {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
			console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è ${author}: ${latestPost.title}`)
			await sendVideoNotification(author, latestPost)
		} else {
			// –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			console.log(
				`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç –¥–ª—è ${author}: ${latestPost.title}`
			)
			await updateInitMessage()
		}
	} else {
		console.log(`–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è ${author} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–æ–≤–æ–µ
		if (!isInitialized) {
			await updateInitMessage()
		}
	}
}

async function updateInitMessage() {
	if (!initMessageId) return

	try {
		const totalVideos = Object.values(videoData).reduce(
			(sum, posts) => sum + posts.length,
			0
		)
		const processedAuthors = Object.keys(videoData).filter(
			author => videoData[author].length > 0
		).length
		const totalAuthors = Object.keys(AUTHORS).length

		const message =
			`üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...</b>\n\n` +
			`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processedAuthors}/${totalAuthors} –∞–≤—Ç–æ—Ä–æ–≤\n` +
			`üì∫ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${totalVideos}\n\n` +
			`${
				processedAuthors === totalAuthors
					? '‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
					: '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...'
			}`

		await bot.editMessageText(message, {
			chat_id: CHAT_ID,
			message_id: initMessageId,
			parse_mode: 'HTML',
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–∏–¥–µ–æ
async function sendVideoNotification(author, video) {
	const message =
		`üÜï –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç <b>${author}</b>\n\n` +
		`üì∫ ${video.url}\n\n` + // –ü—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–µ–≥–∞ <a>
		`üë§ –ê–≤—Ç–æ—Ä: ${author}`

	const keyboard = {
		inline_keyboard: [
			[
				{ text: '‚úÖ Accept', callback_data: `accept_${author}_${video.id}` },
				{ text: '‚ùå Reject', callback_data: `reject_${author}_${video.id}` },
			],
		],
	}

	try {
		await bot.sendMessage(CHAT_ID, message, {
			parse_mode: 'HTML',
			reply_markup: keyboard,
			disable_web_page_preview: false,
		})
		console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${author} - ${video.url}`)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async callbackQuery => {
	const data = callbackQuery.data
	const messageId = callbackQuery.message.message_id
	const chatId = callbackQuery.message.chat.id

	if (data.startsWith('accept_') || data.startsWith('reject_')) {
		const action = data.startsWith('accept_') ? 'Accept' : 'Reject'
		const actionEmoji = action === 'Accept' ? '‚úÖ' : '‚ùå'

		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		const originalText = callbackQuery.message.text
		const newText = originalText + `\n\n${actionEmoji} <b>–°—Ç–∞—Ç—É—Å: ${action}</b>`

		try {
			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
			await bot.editMessageText(newText, {
				chat_id: chatId,
				message_id: messageId,
				parse_mode: 'HTML',
				disable_web_page_preview: false,
			})

			// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
			await bot.answerCallbackQuery(callbackQuery.id, {
				text: `–í—ã–±—Ä–∞–Ω–æ: ${action}`,
			})

			console.log(`–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${action} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error)
		}
	}
})

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤
async function checkAllAuthors() {
	if (!isInitialized) {
		console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...')

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		try {
			const initMessage = await bot.sendMessage(
				CHAT_ID,
				'üîÑ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...</b>\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/4 –∞–≤—Ç–æ—Ä–æ–≤\nüì∫ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: 0\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...',
				{
					parse_mode: 'HTML',
				}
			)
			initMessageId = initMessage.message_id
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
		}
	} else {
		console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤...')
	}

	for (const [author, url] of Object.entries(AUTHORS)) {
		try {
			await checkNewVideos(author, url)
			// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
			await new Promise(resolve => setTimeout(resolve, 2000))
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∞ ${author}:`, error)
		}
	}

	if (!isInitialized) {
		isInitialized = true
		await saveVideoData()
		console.log('‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

		// –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if (initMessageId) {
			try {
				const totalVideos = Object.values(videoData).reduce(
					(sum, posts) => sum + posts.length,
					0
				)
				const finalMessage =
					`‚úÖ <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
					`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Object.keys(AUTHORS).length}/${
						Object.keys(AUTHORS).length
					} –∞–≤—Ç–æ—Ä–æ–≤\n` +
					`üì∫ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${totalVideos}\n\n` +
					`üîÑ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`

				await bot.editMessageText(finalMessage, {
					chat_id: CHAT_ID,
					message_id: initMessageId,
					parse_mode: 'HTML',
				})
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		initMessageId = null
	} else {
		console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
	}
}

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.onText(/\/start/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		const startMessage = `
ü§ñ <b>–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω!</b>

${
	isInitialized
		? '‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
		: '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check)'
}
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ${Object.keys(AUTHORS).length} –∞–≤—Ç–æ—Ä–æ–≤

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/check - ${isInitialized ? '–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é'}
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/authors - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
/last_videos - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
        `

		await bot.sendMessage(CHAT_ID, startMessage, { parse_mode: 'HTML' })
	}
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
bot.onText(/\/authors/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		let authorsMessage = 'üë• <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–≤—Ç–æ—Ä—ã:</b>\n\n'

		let index = 1
		for (const [author, url] of Object.entries(AUTHORS)) {
			authorsMessage += `${index}. <b>${author}</b>\n`
			authorsMessage += `   üîó <a href="${url}">${url}</a>\n\n`
			index++
		}

		await bot.sendMessage(CHAT_ID, authorsMessage, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	}
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ
bot.onText(/\/last_videos/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		let lastVideosMessage = 'üì∫ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –∞–≤—Ç–æ—Ä–æ–≤:</b>\n\n'

		let hasVideos = false
		for (const [author, posts] of Object.entries(videoData)) {
			if (posts && posts.length > 0) {
				hasVideos = true
				const latestPost = posts[0]
				lastVideosMessage += `üë§ <b>${author}</b>\n`
				lastVideosMessage += `üìπ ${latestPost.url}\n` // –ü—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞
				lastVideosMessage += `üÜî ID: ${latestPost.id}\n\n`
			} else {
				lastVideosMessage += `üë§ <b>${author}</b>\n`
				lastVideosMessage += `‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ\n\n`
			}
		}

		if (!hasVideos) {
			lastVideosMessage +=
				'‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ.'
		}

		await bot.sendMessage(CHAT_ID, lastVideosMessage, {
			parse_mode: 'HTML',
			disable_web_page_preview: false,
		})
	}
})
bot.onText(/\/check/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		if (isInitialized) {
			await bot.sendMessage(CHAT_ID, 'üîç –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...')
			await checkAllAuthors()
			await bot.sendMessage(CHAT_ID, '‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
		} else {
			// –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
			await checkAllAuthors()
		}
	}
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
bot.onText(/\/status/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		let statusMessage = 'üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n'

		statusMessage += `üîß <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${
			isInitialized ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è'
		}\n\n`

		for (const [author, posts] of Object.entries(videoData)) {
			statusMessage += `üë§ <b>${author}</b>: ${posts.length} –ø–æ—Å—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n`
			if (posts.length > 0) {
				statusMessage += `   ‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${posts[0].url}\n` // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
			}
		}

		statusMessage += `\nüîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CHECK_INTERVAL / 60000} –º–∏–Ω—É—Ç`
		statusMessage += `\n‚è∞ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`

		if (!isInitialized) {
			statusMessage += `\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ë–æ—Ç –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.`
		}

		await bot.sendMessage(CHAT_ID, statusMessage, { parse_mode: 'HTML' })
	}
})

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.onText(/\/help/, async msg => {
	if (msg.chat.id.toString() === CHAT_ID) {
		const helpMessage = `
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/check - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/authors - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
/last_videos - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ Accept/Reject
‚Ä¢ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${Object.keys(AUTHORS).length} –∞–≤—Ç–æ—Ä–æ–≤
        `

		await bot.sendMessage(CHAT_ID, helpMessage, { parse_mode: 'HTML' })
	}
})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
	try {
		console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		await loadVideoData()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
		await bot.sendMessage(
			CHAT_ID,
			'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.'
		)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
		setTimeout(checkAllAuthors, 10000)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		setInterval(() => {
			if (isInitialized) {
				checkAllAuthors()
			}
		}, CHECK_INTERVAL)

		console.log(
			`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. ${
				isInitialized ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.' : '–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.'
			}`
		)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', error => {
	console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', error)
})

process.on('uncaughtException', error => {
	console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
})

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
initBot()
